// works for NODE > v10
const axios = require("axios");
const fs = require("fs");
const FormData = require("form-data");
const {setTimeout} = require("node:timers/promises");

const apiKey = "my-api-key";
const account = "my-account";
const endpoint = "my-endpoint";
const version = "my-version";

const urlRoot = `https://api.mindee.net/v1/products/${account}/${endpoint}/v${version}`;

async function makeRequest(url, method, data = null) {
  const config = {
    method: method,
    url: url,
    headers: { Authorization: `Token ${apiKey}` },
    data
  }
  try {
    const response = await axios(config);
    return response.data;
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
}

async function enqueueRequest(filePath) {
  const data = new FormData();
  data.append("document", fs.createReadStream(filePath));
  return await makeRequest(`${urlRoot}/predict_async`, "POST", data);
}

async function pollRequest(jobId) {
  return await makeRequest(`${urlRoot}/documents/queue/${jobId}`, "GET");
}

async function main(filePath) {
  const enqueueResponse = await enqueueRequest(filePath);
  await setTimeout(6000);
  let pollResponse;
  let retryCounter = 1;
  while (retryCounter <= 10) {
    pollResponse = await pollRequest(enqueueResponse.job.id);
    if (pollResponse.job.status === "completed") {
      break;
    }
    retryCounter += 1;
    await setTimeout(1000);
  }
  if (pollResponse.job.status !== "completed") {
    throw Error(`Asynchronous parsing request timed out.`);
  } else {
    console.log(pollResponse);
  }
}

main("/path/to/the/file.ext");
